# Installation

*------------------------------------------------------------
* The following document describes the installation of MORIS. This installation
* is based on spack.
*
* For installation of MORIS on a standard workstation under Linux, follow the
* instructions below. These instructions have been tested for OPENSuse 15.x.
*
* For installation of MORIS on a cluster system, see Install_Cluter.md
*
* Note: The installation process uses tcsh
*------------------------------------------------------------

*------------------------------------------------------------
* Prerequisites regarding third party libraries:
* 
* MORIS uses the following third party libraries

* armadillo (required)
* arpack (required)
* boost (required) with the following packages
*    filesystem+log+serialization+system+thread+timer
* eigen (required)
* hdf5 (required)
* mpi implementation (required)
* petsc (optional) with the following package
*    mpi+metis+hypre+suite-sparse
*    optional: mkl-pardiso
*    optional: mumps 
* slepc (optional)
* superlu (required)
* trilinos (required) with the following package
*    boost+hdf5+mpi+suite-sparse+superlu-dist+amesos+anasazi+aztec+belos+chaco+epetra+exodus+ifpack+ifpack2+ml+rol+stk+zoltan2
*    optional: pardiso
*    optional: mumps 
*
* in addition MORIS has interfaces to the follow optimization algorithms

* gcmma 
* snopt
* lbfgs
*
* Libraries for these optimization algorithms are not provided with the MORIS GitHub repository. Unless these libraries 
* are provided, MORIS cmake configuration options need to be set to install MORIS without optimization libraries. 
*------------------------------------------------------------

*------------------------------------------------------------
* Prerequisites on OS installation:
*
* The following packages should be installed; 
* if not, install them as packages of your OS or with spack (see option below)
* for OpenSuse OS: see prerequisites file in moris/share/install folder

* git (OS)
* make (OS)
*
* patch 
* pkg-config
* makeinfo (part of texinfo package)
*------------------------------------------------------------

* To check whether the above packages are installed, excute 
* the command:  

which patch
which pkg-config
which makeinfo

*------------------------------------------------------------
* For users with an existing MORIS installation, it is 
* strongly recommended to remove all environment variables
* related to MORIS from their environment source files (i.e.,
* .cshrc) before performing the MORIS installation described 
* below.
*
*------------------------------------------------------------

*------------------------------------------------------------
* basic setup
*
* MORIS and spack along with third party libraries will be installed 
* in in a workspace, e.g. $HOME/codes
*------------------------------------------------------------

* set workspace; change directory name as needed

setenv WORKSPACE $HOME/codes

*------------------------------------------------------------

* create and enter workspace

mkdir $WORKSPACE
cd $WORKSPACE

*------------------------------------------------------------

* get spack

git clone https://github.com/spack/spack.git

*------------------------------------------------------------

* set spack root directory and add to PATH variable

setenv SPACK_ROOT $WORKSPACE/spack
setenv PATH $PATH/:$SPACK_ROOT/bin

*------------------------------------------------------------

* source spack environment

source $SPACK_ROOT/share/spack/setup-env.csh

*------------------------------------------------------------

* get moris (main branch)

git clone git@github.com:kkmaute/moris

or (for non-developers)

git clone https://github.com/kkmaute/moris

*------------------------------------------------------------

* add moris specific packages to spack; ignore warnings
* note: you may have to add "dummy" after "--skip-editor"

* important: you need to create the spack package files for the optimization
* libraries even if you do not want to install them

spack create --name moris --skip-editor
spack create --name gcmma --skip-editor
spack create --name lbfgs --skip-editor
spack create --name snopt --skip-editor

*------------------------------------------------------------

* add package files; overwrite trilinos package file to enable mkl and pardiso; might need edting depending on trilinos version

* important: you need to copy the spack package files for the optimization
* libraries even if you do not want to install them

cp $WORKSPACE/moris/share/spack/trilinos_package.py  $WORKSPACE/spack/var/spack/repos/builtin/packages/trilinos/package.py
cp $WORKSPACE/moris/share/spack/moris_package.py     $WORKSPACE/spack/var/spack/repos/builtin/packages/moris/package.py
cp $WORKSPACE/moris/share/spack/gcmma_package.py     $WORKSPACE/spack/var/spack/repos/builtin/packages/gcmma/package.py
cp $WORKSPACE/moris/share/spack/lbfgs_package.py     $WORKSPACE/spack/var/spack/repos/builtin/packages/lbfgs/package.py
cp $WORKSPACE/moris/share/spack/snopt_package.py     $WORKSPACE/spack/var/spack/repos/builtin/packages/snopt/package.py

*------------------------------------------------------------

* create spack environment and get spack ready to install moris

spack env create -d .

spack env activate .

*------------------------------------------------------------

* if default TMPDIR (usually /tmp) has limited space set TMPDIR variable 
* to directory on partition with sufficient space (> 1GB)

setenv TMPDIR ~/work//tmp/

*------------------------------------------------------------

* let spack find installed compilers; see $HOME/.spack/linux/compilers.yaml

spack compiler find

*------------------------------------------------------------

* check what compilers have been found and remove unwanted;
* recommendation remove all but the one compiler you want to build moris with

spack compiler list

spack compiler rm <unwanted compiler>

*------------------------------------------------------------

* let spack find installed external package
* after commend has been exectued, see $HOME/.spack/packages.yaml

* IMPORTANT: in case your OS is outdated, do not excute this step;
* in this case all packages needed will be installed by spack

spack external find

* in case the openmpi version provded by OS should used add to spack.yaml file
  WATCH indentation
  
  packages:
    openmpi:
      externals:
      - spec: openmpi@4.1.4
        prefix: /usr/lib64/mpi/gcc/openmpi4
      buildable: false

*------------------------------------------------------------

* if texinfo is installed through your OS but makeinfo is not found
* remove texinfo from spack.yaml

*------------------------------------------------------------

* By default MORIS is installed with support for petsc,slepc, pardiso, and mumps, as well as the optimization libraries; 
* to turn off one or all of these options, use for example:

spack add moris+openblas~petsc~slepc~pardiso~mumps~gcmma~lbfgs~snopt

* otherwise use the following spack command to install default configuration

spack add moris+pardiso+mumps

* set local moris directory as source for spack install

spack develop --path $WORKSPACE/moris moris@main

* add openblas (only needed if not defined explicilty above)

spack add openblas

* in case openmpi should be build by spack

* without scheduler

spack add openmpi fabrics=auto 

* with scheduler 

spack add openmpi +legacylaunchers +pmi+pmix schedulers=slurm fabrics=auto

* add location of scheduler to spack.yaml file (watch indentation)

  packages:
    slurm:
      externals:
      - spec: slurm@22.05.2
        prefix: /usr
      buildable: false

* add latest version of cmake (needed by recent trilinos versions)

spack add cmake@master

* add doxygen (optional)

spack add doxygen

* add clang for clang formater (optional)

spack add llvm~gold

*------------------------------------------------------------

* on OS openSuse you may run into issue with the spack installation
* of python to avoid this, install python seperately 

spack add python 

*------------------------------------------------------------

* if patch, pkgconf, and/or texinfo are not installed 
* on your OS add one or multiple of the following packages

spack add patch
spack add pkgconf
spack add texinfo

*------------------------------------------------------------

* make sure that all packages use the same dependent packages

spack config edit

* and set: concretizer: unify: when_possible

*------------------------------------------------------------

* finalize installation configuration

spack concretize -f -U

*------------------------------------------------------------

* if patch, pkgconf, and/or texinfo are not installed 
* on your OS install one or multiple of the following packages

spack install patch
spack install pkgconf
spack install texinfo

*------------------------------------------------------------

* on OS openSuse and if python is installed seperately, 
* install python first and fix issue with path to lib-dynload

spack install python

* check if the following command works

spack location --install-dir python

* if yes, skip the following steps; otherwise

* identify python installation under spack/opt/spack/linux-opensuse15-zen4/gcc-11.3.0/python-3. ....

setenv PYIDIR $WORKSPACE/spack/opt/spack/linux-opensuse15-zen3/gcc-11.3.0/python-3. ...

* if not 3.10 replace 3.10 with actual version number (major-minor)

cp -R $PYIDIR/lib64/python3.11/lib-dynload $PYIDIR/lib/python3.11/.

unsetenv PYIDIR

* check again if the following command works

spack location --install-dir python

*------------------------------------------------------------
* if openmpi is explicitly defined (e.g. because slurm scheduler is required)

spack install openmpi

*------------------------------------------------------------

* install moris; NOTE: different procedure for users and developers 
* add -j <num procs> to limit the number of processors

* for users
spack install moris

* for developers
spack install --only dependencies moris

* for developers
spack install openblas

* for developers if doxygen (optional)
spack install doxygen

* for developers if llvm (optional)
spack install llvm

*------------------------------------------------------------

* remove left over build directories

spack clean

*------------------------------------------------------------

* create the following resource file and source it as part of your .cshrc

tcsh $WORKSPACE/moris/share/spack/make_moris_cshrc.sh

*------------------------------------------------------------
*
* Important: .cshrc_moris needs to be sourced when working with moris
*
* Recommendation: include it in your .cshrc file
*
*------------------------------------------------------------

* if you have disabled one of the default packages add to the cmake options one or more of the following 
* of the following directives:

* without petsc:   -DMORIS_HAVE_PETSC=OFF
* without slepc:   -DMORIS_HAVE_SLEPC=OFF
* without pardiso: -DMORIS_USE_PARDISO=OFF 
* without mumps:   -DMORIS_USE_MUMPS=OFF 
* without gcmma:   -DMORIS_HAVE_GCMMA=OFF
* without lbfgs:   -DMORIS_HAVE_LBFGS=OFF
* without snopt:   -DMORIS_HAVE_SNOPT=OFF

* build moris optimized version and run tests

*------------------------------------------------------------

* if you have installed a trilinos version that uses modern cmake use the following option when
* configuring moris

* -DMORIS_HAVE_TRILINOS_NEW_CMAKE=ON

*------------------------------------------------------------

source $HOME/.cshrc_moris

cd $MORISROOT

mkdir build_opt

cd build_opt

* depending on your spack installation setting, you may be able to use one of the following settings 

cmake -DBUILD_ALL=ON -DMORIS_USE_EXAMPLES=ON ..
cmake -DBUILD_ALL=ON -DMORIS_USE_EXAMPLES=ON ..

* Using an intel processor, use MKL instead of OPENBLAS

cmake -DBUILD_ALL=ON -DMORIS_USE_EXAMPLES=ON -DMORIS_USE_MKL=ON -DMORIS_USE_OPENBLAS=OFF ..
cmake -DBUILD_ALL=ON -DMORIS_USE_EXAMPLES=ON -DMORIS_USE_MKL=ON -DMORIS_USE_OPENBLAS=OFF ..

* if you do not want to use neither MKL nor OPENBLAS 

cmake -DBUILD_ALL=ON -DMORIS_USE_EXAMPLES=ON -DMORIS_USE_OPENBLAS=OFF -DMORIS_USE_LAPACK=ON ..
cmake -DBUILD_ALL=ON -DMORIS_USE_EXAMPLES=ON -DMORIS_USE_OPENBLAS=OFF -DMORIS_USE_LAPACK=ON ..

* if you do not have installed petsc, slepc, pardiso, and the optimization libraries:

cmake -DBUILD_ALL=ON -DMORIS_USE_EXAMPLES=ON -DMORIS_HAVE_PETSC=OFF -DMORIS_HAVE_SLEPC=OFF -DMORIS_USE_PARDISO=OFF -DMORIS_USE_MUMPS=OFF -DMORIS_HAVE_GCMMA=OFF -DMORIS_HAVE_LBFGS=OFF -DMORIS_HAVE_SNOPT=OFF ..
cmake -DBUILD_ALL=ON -DMORIS_USE_EXAMPLES=ON -DMORIS_HAVE_PETSC=OFF -DMORIS_HAVE_SLEPC=OFF -DMORIS_USE_PARDISO=OFF -DMORIS_USE_MUMPS=OFF -DMORIS_HAVE_GCMMA=OFF -DMORIS_HAVE_LBFGS=OFF -DMORIS_HAVE_SNOPT=OFF ..

* compile moris

make -j 16

* run tests

ctest

*------------------------------------------------------------

* build debug version and run test

source $HOME/.cshrc_moris

cd $MORISROOT

mkdir build_dbg

cd build_dbg

cmake -DBUILD_ALL=ON -DMORIS_HAVE_DEBUG=ON -DMORIS_HAVE_SYMBOLIC=ON -DMORIS_HAVE_SYMBOLIC_STRONG=ON -DMORIS_USE_EXAMPLES=ON ..
cmake -DBUILD_ALL=ON -DMORIS_HAVE_DEBUG=ON -DMORIS_HAVE_SYMBOLIC=ON -DMORIS_HAVE_SYMBOLIC_STRONG=ON -DMORIS_USE_EXAMPLES=ON ..

* Using an intel processor, use MKL instead of OPENBLAS

cmake -DBUILD_ALL=ON -DMORIS_HAVE_DEBUG=ON -DMORIS_HAVE_SYMBOLIC=ON -DMORIS_HAVE_SYMBOLIC_STRONG=ON -DMORIS_USE_EXAMPLES=ON -DMORIS_USE_MKL=ON -DMORIS_USE_OPENBLAS=OFF ..
cmake -DBUILD_ALL=ON -DMORIS_HAVE_DEBUG=ON -DMORIS_HAVE_SYMBOLIC=ON -DMORIS_HAVE_SYMBOLIC_STRONG=ON -DMORIS_USE_EXAMPLES=ON -DMORIS_USE_MKL=ON -DMORIS_USE_OPENBLAS=OFF ..

* if you do not want to use neither MKL nor OPENBLAS 

cmake -DBUILD_ALL=ON -DMORIS_HAVE_DEBUG=ON -DMORIS_HAVE_SYMBOLIC=ON -DMORIS_HAVE_SYMBOLIC_STRONG=ON -DMORIS_USE_EXAMPLES=ON -DMORIS_USE_OPENBLAS=OFF -DMORIS_USE_LAPACK=ON ..
cmake -DBUILD_ALL=ON -DMORIS_HAVE_DEBUG=ON -DMORIS_HAVE_SYMBOLIC=ON -DMORIS_HAVE_SYMBOLIC_STRONG=ON -DMORIS_USE_EXAMPLES=ON -DMORIS_USE_OPENBLAS=OFF -DMORIS_USE_LAPACK=ON ..

* if you do not have installed petsc,slepc, pardiso, and the optimization libraries:

cmake -DBUILD_ALL=ON -DMORIS_HAVE_DEBUG=ON -DMORIS_HAVE_SYMBOLIC=ON -DMORIS_HAVE_SYMBOLIC_STRONG=ON -DMORIS_USE_EXAMPLES=ON -DMORIS_HAVE_PETSC=OFF -DMORIS_HAVE_SLEPC=OFF -DMORIS_USE_PARDISO=OFF -DMORIS_USE_MUMPS=OFF -DMORIS_HAVE_GCMMA=OFF -DMORIS_HAVE_LBFGS=OFF -DMORIS_HAVE_SNOPT=OFF ..
cmake -DBUILD_ALL=ON -DMORIS_HAVE_DEBUG=ON -DMORIS_HAVE_SYMBOLIC=ON -DMORIS_HAVE_SYMBOLIC_STRONG=ON -DMORIS_USE_EXAMPLES=ON -DMORIS_HAVE_PETSC=OFF -DMORIS_HAVE_SLEPC=OFF -DMORIS_USE_PARDISO=OFF -DMORIS_USE_MUMPS=OFF -DMORIS_HAVE_GCMMA=OFF -DMORIS_HAVE_LBFGS=OFF -DMORIS_HAVE_SNOPT=OFF ..

* compile moris

make -j 16

* run tests

ctest
